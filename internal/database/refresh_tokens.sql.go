// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: refresh_tokens.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const getRefreshTokenByToken = `-- name: GetRefreshTokenByToken :one
SELECT token, created_at, updated_at, expires_at, revoked_at, user_id FROM refresh_tokens 
WHERE token = $1 LIMIT 1
`

func (q *Queries) GetRefreshTokenByToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshTokenByToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}

const insertRefreshToken = `-- name: InsertRefreshToken :one
INSERT INTO refresh_tokens (token, created_at, updated_at, expired_at, revoked_at, user_id)
VALUES (
    $1,
		NOW(),
		NOW(),
		NOW() + INTERVAL '60 days',
		NULL,
		$2
)
RETURNING token, created_at, updated_at, expires_at, revoked_at, user_id
`

type InsertRefreshTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) InsertRefreshToken(ctx context.Context, arg InsertRefreshTokenParams) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, insertRefreshToken, arg.Token, arg.UserID)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ExpiresAt,
		&i.RevokedAt,
		&i.UserID,
	)
	return i, err
}
